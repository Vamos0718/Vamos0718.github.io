<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类模板：作函数参数&amp;隐式推导</title>
      <link href="/2023/11/29/%E7%B1%BB%E6%A8%A1%E6%9D%BF%EF%BC%9A%E4%BD%9C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0&amp;%E9%9A%90%E5%BC%8F%E6%8E%A8%E5%AF%BC/"/>
      <url>/2023/11/29/%E7%B1%BB%E6%A8%A1%E6%9D%BF%EF%BC%9A%E4%BD%9C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0&amp;%E9%9A%90%E5%BC%8F%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="类模板：作函数参数-隐式推导"><a href="#类模板：作函数参数-隐式推导" class="headerlink" title="类模板：作函数参数&amp;隐式推导"></a>类模板：作函数参数&amp;隐式推导</h1><h2 id="类模板作函数参数："><a href="#类模板作函数参数：" class="headerlink" title="类模板作函数参数："></a>类模板作函数参数：</h2><h3 id="类模板作形参时，有根据模板参数情况的不同，可分为三种情况："><a href="#类模板作形参时，有根据模板参数情况的不同，可分为三种情况：" class="headerlink" title="类模板作形参时，有根据模板参数情况的不同，可分为三种情况："></a>类模板作形参时，有根据模板参数情况的不同，可分为三种情况：</h3><p>1.指定模板参数类型（常用）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Base&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.参数模板化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Base&lt;T1,T2&gt; &amp;b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.整个类模板化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T &amp;b)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类模板的隐式推导："><a href="#类模板的隐式推导：" class="headerlink" title="类模板的隐式推导："></a>类模板的隐式推导：</h2><p>使用类模板实例化对象时，可通过 ”构造函数的形参“ 隐式推导 “类模板的模板参数” ，类似于函数模板的隐式推导：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>(T1 n,T2 a)&#123;  <span class="comment">//使用构造函数隐式推导时，其形参应包含全部模板参数：T1、T2</span></span><br><span class="line">num=n;</span><br><span class="line">age=a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 num;</span><br><span class="line">T2 age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Base <span class="title">b1</span><span class="params">(<span class="number">5</span>,<span class="number">10</span>)</span></span>; <span class="comment">//隐式推导为T1=int，T2=int</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合："><a href="#结合：" class="headerlink" title="&amp;结合："></a>&amp;结合：</h2><p>第一种方法：指定模板参数类型，由于形参显式指定了类对象的模板参数， “类模板隐式推导的实例化对象” 不可作为实参传入，而应传入 “类模板显式指定的实例化对象” </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base &lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">b1</span>(<span class="number">5</span>,<span class="number">10</span>); <span class="comment">//若Base b1(5,10);</span></span><br><span class="line">    <span class="built_in">print</span>(b1);              <span class="comment">//该对象无法作为实参传入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法与第三种方法：由于形参未指定模板参数类型，因此 “类模板显式指定&#x2F;隐式推导的实例化对象” 均可作为实参传入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Base &lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">b2</span>(<span class="number">15</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="function">Base <span class="title">b3</span><span class="params">(<span class="number">25</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="built_in">print</span>(b2);</span><br><span class="line">    <span class="built_in">print</span>(b3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2.学习笔记 </category>
          
          <category> 2.1C++ </category>
          
          <category> 2.1.1模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 类模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《钢铁是怎样炼成的》</title>
      <link href="/2023/11/20/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/"/>
      <url>/2023/11/20/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<h1 id="摘抄："><a href="#摘抄：" class="headerlink" title="摘抄："></a>摘抄：</h1><p>​“那些苟且偷生的人，我一点也看不上。现在全世界都着火了，奴隶们都起来了，他们要推翻旧社会。”</p><p>​“是的，要勇敢！要坚强！要像在书里看到的那些人一样！”</p><p>​“看天空，是碧蓝的，你的眼也跟天空一样碧蓝，这样不好。你的眼应该是灰色的，像钢铁的一样。碧蓝的颜色——太温柔了。”</p><p>​“世界上真有那样的人。本来那是谁也不能忍受的，但当他获得了一种主义的支持后，真就能忍受了。”</p><p>​“知道为什么而死，问题就不一样了。明白了这一点的人，才有无穷的力量。要是你感到真理就在你那一边，那就死得从容了，英雄就是这么一回事。可是也有像癞皮狗一样死去，死的稀里糊涂，一点也不光彩的。”</p>]]></content>
      
      
      <categories>
          
          <category> 3.读书笔记 </category>
          
          <category> 3.1钢铁是怎样炼成的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钢铁是怎样炼成的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/16/Hello%20World/"/>
      <url>/2023/11/16/Hello%20World/</url>
      
        <content type="html"><![CDATA[<h1 id="我的个人博客网站搭载完成咯Own"><a href="#我的个人博客网站搭载完成咯Own" class="headerlink" title="我的个人博客网站搭载完成咯Own"></a>我的个人博客网站搭载完成咯Own</h1>]]></content>
      
      
      <categories>
          
          <category> 1.生活随笔 </category>
          
          <category> 2.学习笔记 </category>
          
          <category> 3.读书笔记 </category>
          
          <category> 4.辩证分析 </category>
          
          <category> 5.认识自我 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
